To implement the seat reservation system with the specified requirements and tech stack, here's the detailed solution plan:

Step 1: Database Schema Design (PostgreSQL)

You need to create three main tables: `users`, `seats`, and `bookings`.

Schema:

sql
-- Users table to store user information
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(100) UNIQUE NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Seats table to store the seats' information in the train
CREATE TABLE seats (
  id SERIAL PRIMARY KEY,
  row_number INT NOT NULL,  -- Row number in the coach
  seat_number INT NOT NULL,  -- Seat number in the row
  status VARCHAR(20) DEFAULT 'available', -- 'available' or 'booked'
  reserved_by INT REFERENCES users(id),  -- User who reserved the seat
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Bookings table to track reservations
CREATE TABLE bookings (
  id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(id),
  seat_ids INT[] NOT NULL,  -- Array of seat IDs reserved
  booking_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status VARCHAR(20) DEFAULT 'active', -- 'active' or 'canceled'
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


Step 2: Backend Implementation (Node.js, Express.js)

1. User Authentication:
   - Use JWT for managing user sessions.
   - Use bcrypt for password hashing.
   - Create routes for user sign-up and login (`POST /auth/signup`, `POST /auth/login`).

2. Seat Reservation Logic:
   - First, check if a full row (7 seats) is available for booking.
   - If no full row is available, search for nearby available seats (up to 7 consecutive seats).
   - When seats are reserved, update the status to `booked` and associate the seats with the user.
   - If the user cancels the booking, update the seat status back to `available`.

3. API Routes:
   - `POST /api/auth/signup` – To create a new user.
   - `POST /api/auth/login` – To log in and get a JWT token.
   - `POST /api/reserve` – To reserve seats.
   - `DELETE /api/reserve/:bookingId` – To cancel a reservation.
   - `GET /api/seats` – To view the seat status (available or booked).
   
 Example Code for Reservation Logic:

js
const express = require('express');
const { Client } = require('pg');
const router = express.Router();

// PostgreSQL client setup
const client = new Client({
  connectionString: process.env.DATABASE_URL,
});
client.connect();

// Check for available seats and reserve them
router.post('/reserve', async (req, res) => {
  const { userId, requestedSeats } = req.body;

  try {
    // Fetch available seats in the requested row
    const availableSeats = await client.query(`
      SELECT id FROM seats WHERE row_number = ANY($1) AND status = 'available'`, [requestedSeats.rowNumbers]);

    if (availableSeats.rows.length < requestedSeats.count) {
      return res.status(400).send('Not enough seats available.');
    }

    // Reserve the seats by updating their status
    const seatIds = availableSeats.rows.map(seat => seat.id);
    await client.query(`
      UPDATE seats SET status = 'booked', reserved_by = $1 WHERE id = ANY($2)`, [userId, seatIds]);

    // Create booking record
    await client.query(`
      INSERT INTO bookings (user_id, seat_ids) VALUES ($1, $2)`, [userId, seatIds]);

    return res.status(200).send('Seats reserved successfully');
  } catch (error) {
    console.error(error);
    return res.status(500).send('Internal server error');
  }
});

module.exports = router;


Step 3: Frontend Implementation (Next.js)

1. Login and Signup Pages:
   - Use Next.js to create dynamic pages for login and signup.
   - Use form validation on the frontend to ensure proper data is sent to the backend.

2. Seat Layout:
   - Display the seat layout (7 seats per row, except the last row with 3 seats).
   - Allow users to select seats, and show them which seats are available or booked.

3. Booking Page:
   - Users can select up to 7 seats.
   - On clicking "Book", an API call should be made to the backend to reserve the selected seats.
   - Show confirmation and update the seat layout accordingly.

4. Responsive Design:
   - Ensure that the seat booking layout is responsive and works on mobile, tablet, and desktop devices.

5. API Integration:
   - Use `fetch` or `axios` to make API calls to the backend to fetch available seats and submit booking requests.

Example of a seat reservation component in React:

js
import { useState, useEffect } from 'react';

const SeatLayout = () => {
  const [seats, setSeats] = useState([]);

  useEffect(() => {
    // Fetch available seats from the backend
    fetch('/api/seats')
      .then(response => response.json())
      .then(data => setSeats(data));
  }, []);

  const handleSeatSelect = (seatId) => {
    // Handle seat selection logic
  };

  return (
    <div className="seat-layout">
      {seats.map((row, rowIndex) => (
        <div key={rowIndex} className="row">
          {row.map((seat) => (
            <div
              key={seat.id}
              className={`seat ${seat.status}`}
              onClick={() => handleSeatSelect(seat.id)}
            >
              {seat.seat_number}
            </div>
          ))}
        </div>
      ))}
    </div>
  );
};

export default SeatLayout;


Step 4: Error Handling and Input Validation

1. Backend:
   - Validate user input before saving to the database (e.g., email format, password length).
   - Handle errors (e.g., invalid seat selection, unauthorized access) with appropriate error messages.

2. Frontend:
   - Show error messages if there are issues with booking (e.g., "Seats already booked").
   - Provide feedback to the user about their reservation status.

Step 5: Deployment

- Frontend: Deploy the Next.js frontend on platforms like Vercel or Netlify.
- Backend: Deploy the Node.js backend on platforms like Heroku, AWS EC2, or DigitalOcean.
- Database:Use PostgreSQL on platforms like Heroku Postgres, AWS RDS, or DigitalOcean Managed Databases.

Step 6: Provide GitHub Repository and Demo Link

1. GitHub Repository:
   - Create a public GitHub repository containing your code (backend and frontend).
   - Include a `README.md` file with setup instructions and API documentation.

2. Demo Link:
   - Share the live demo link where the users can interact with the app.

3. Presentation Video:
   - Record a video demonstrating the application, covering the login/signup process, seat selection, booking, and confirmation.

Step 7: Testing

- Test edge cases like booking the last seat in the last row, booking more than 7 seats, etc.
- Ensure all functionality works as expected: user login, seat selection, booking, and cancellation.
